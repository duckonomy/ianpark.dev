---
// import Search from "../Search.astro";
// import Search from "../Search.tsx";
// import ThemeToggle from "../ThemeToggle.astro";
import ThemeToggle from "../ThemeToggle.tsx";
import LanguageSelector from "@/components/LanguageSelector.tsx";
import Logo from "./Logo.astro";

const { type } = Astro.props;
import { getLangFromUrl, useTranslatedPath } from "@/i18n/utils";

const lang = getLangFromUrl(Astro.url);
const translatePath = useTranslatedPath(lang);
---

<header class="group relative my-8 flex select-none items-center justify-between font-bold sm:mb-2">
	<div
		class="nav-container font-logo flex rounded-lg bg-logo p-1 text-lg font-bold text-logo-foreground"
	>
		{
			type === "home" && (
				<div class="nav-static">
					<Logo baseText="~" isMenu={false} translatePath={translatePath} url="/" />
				</div>
			)
		}

		{
			type === "404" && (
				<div class="nav-static">
					<Logo baseText="~" isMenu={false} translatePath={translatePath} url="/" />
				</div>
			)
		}

		{
			type === "posts" && (
				<div class="nav-dynamic">
					<Logo
						baseText="~"
						currentText="Posts"
						isMenu={true}
						translatePath={translatePath}
						url="/"
					/>
				</div>
			)
		}

		{
			type === "post" && (
				<div class="nav-static">
					<Logo baseText="路路" isMenu={false} translatePath={translatePath} url="/posts" />
				</div>
			)
		}

		{
			type === "about" && (
				<div class="nav-dynamic">
					<Logo
						baseText="~"
						currentText="About"
						isMenu={true}
						translatePath={translatePath}
						url="/"
					/>
				</div>
			)
		}

		{
			!(
				type === "404" ||
				type === "home" ||
				type === "posts" ||
				type === "post" ||
				type === "tag" ||
				type === "about"
			) && (
				<div class="nav-static">
					<Logo baseText="路路" isMenu={false} translatePath={translatePath} url="/" />
				</div>
			)
		}
	</div>
	<div class="flex">
		<!-- <Search client:load /> -->
		<ThemeToggle client:load />
		<LanguageSelector type={type} client:load />
	</div>
</header>

<style is:global>
	/* Ensure font is loaded before animations */
	@font-face {
		font-family: "Playfair Display Variable", serif;
		font-display: block; /* This ensures the font is shown only when loaded */
	}

	/* Preserve font during transitions */
	::view-transition-old(*),
	::view-transition-new(*) {
		font-family: "Playfair Display Variable", serif;
	}

	.nav-container {
		view-transition-name: nav-container;
		font-synthesis: none; /* Prevent synthetic font variants */
	}

	:root::view-transition-container(nav-container) {
		animation: 0.15s cubic-bezier(0.4, 0, 0.2, 1) both morphWidth;
	}

	@keyframes content-fade {
		from {
			opacity: 1;
		}
		to {
			opacity: 1;
		}
	}

	::view-transition-old(nav-container),
	::view-transition-new(nav-container) {
		animation: none;
		height: 100%;
		transform-origin: left;
		border-radius: 0.5rem;
		overflow: hidden;
	}

	.nav-static {
		view-transition-name: nav-static;
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	}

	.nav-dynamic {
		view-transition-name: nav-dynamic;
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	}

	::view-transition-old(nav-static),
	::view-transition-new(nav-static) {
		/* animation: none; */
		animation: 0.15s cubic-bezier(0.4, 0, 0.2, 1) both content-fade;
		transform-origin: left;
	}

	::view-transition-old(nav-dynamic) {
		animation: 0.15s cubic-bezier(0.4, 0, 0.2, 1) both fadeOut;
	}

	::view-transition-new(nav-dynamic) {
		animation: 0.15s cubic-bezier(0.4, 0, 0.2, 1) both fadeIn;
	}

	@keyframes morphWidth {
		from {
			transform: scaleX(0.9);
		}
		to {
			transform: scaleX(1);
		}
	}

	@keyframes fadeOut {
		to {
			opacity: 0;
		}
	}

	@keyframes fadeIn {
		from {
			opacity: 0;
		}
	}
</style>
