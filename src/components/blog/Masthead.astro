---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../FormattedDate.astro";

interface Props {
	content: CollectionEntry<"post">;
	readingTime: string;
}

const {
	content: { data },
	readingTime,
} = Astro.props;

const readTime = readingTime ?? "need to refresh!";

const dateTimeOptions: Intl.DateTimeFormatOptions = {
	month: "short",
	day: "numeric",
	year: "numeric",
};
---

{
	data.coverImage && (
		<div class="mb-6 aspect-[16/9]">
			<Image
				alt={data.coverImage.alt}
				class="object-cover"
				fetchpriority="high"
				loading="eager"
				src={data.coverImage.src}
			/>
		</div>
	)
}
{data.draft ? <span class="text-xs text-muted-foreground sm:text-sm">(Draft)</span> : null}

<h1
	class="title mb-2 w-fit font-serif text-xl font-medium text-accent-foreground sm:mb-1 sm:text-2xl"
>
	<!-- <h1 -->
	<!--   class="site-post-title title font-bold text-xl w-fit sm:text-2xl mb-2 sm:mb-2 text-muted-foreground" -->
	<!--   style={`view-transition-name: post-title-${id}`} -->
	<!-- > -->
	{data.title}
</h1>
<div class="flex flex-wrap items-center gap-x-3 gap-y-0.5 text-muted-foreground">
	<p class="text-sm">
		<FormattedDate date={data.publishDate} dateTimeOptions={dateTimeOptions} />
		/{" "}
		{readTime}
	</p>
	{
		data.updatedDate && (
			<span class="-mb-0.5 hidden rounded px-2 text-sm sm:block sm:py-0.5 sm:pt-0.5">
				Updated:
				<FormattedDate class="ms-1" date={data.updatedDate} dateTimeOptions={dateTimeOptions} />
			</span>
		)
	}
</div>
